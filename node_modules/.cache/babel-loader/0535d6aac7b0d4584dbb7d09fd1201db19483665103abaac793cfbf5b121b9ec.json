{"ast":null,"code":"var _jsxFileName = \"/home/tanusha/Documents/Projects/adsa/src/components/CalculateRouteButton.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalculateRouteButton = _ref => {\n  let {\n    deliveryPoints\n  } = _ref;\n  const calculateOptimalRoute = () => {\n    if (deliveryPoints.length < 2) {\n      alert(\"Add at least two delivery points to calculate the route.\");\n      return;\n    }\n\n    // Placeholder logic for calculating the optimal route\n    // Replace this with an actual algorithm like TSP\n    const route = deliveryPoints.map((point, index) => `Point ${index + 1}: (${point.lat}, ${point.lng})`);\n    alert(`Optimal Route:\\n${route.join(\" -> \")}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: calculateOptimalRoute,\n    className: \"mt-4 w-full bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600\",\n    children: \"Calculate Optimal Route\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = CalculateRouteButton;\nexport default CalculateRouteButton;\nvar _c;\n$RefreshReg$(_c, \"CalculateRouteButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CalculateRouteButton","_ref","deliveryPoints","calculateOptimalRoute","length","alert","route","map","point","index","lat","lng","join","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tanusha/Documents/Projects/adsa/src/components/CalculateRouteButton.js"],"sourcesContent":["import React from \"react\";\n\nconst CalculateRouteButton = ({ deliveryPoints }) => {\n  const calculateOptimalRoute = () => {\n    if (deliveryPoints.length < 2) {\n      alert(\"Add at least two delivery points to calculate the route.\");\n      return;\n    }\n\n    // Placeholder logic for calculating the optimal route\n    // Replace this with an actual algorithm like TSP\n    const route = deliveryPoints.map((point, index) => `Point ${index + 1}: (${point.lat}, ${point.lng})`);\n    alert(`Optimal Route:\\n${route.join(\" -> \")}`);\n  };\n\n  return (\n    <button\n      onClick={calculateOptimalRoute}\n      className=\"mt-4 w-full bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600\"\n    >\n      Calculate Optimal Route\n    </button>\n  );\n};\n\nexport default CalculateRouteButton;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,oBAAoB,GAAGC,IAAA,IAAwB;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAD,IAAA;EAC9C,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAID,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7BC,KAAK,CAAC,0DAA0D,CAAC;MACjE;IACF;;IAEA;IACA;IACA,MAAMC,KAAK,GAAGJ,cAAc,CAACK,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAM,SAAQA,KAAK,GAAG,CAAE,MAAKD,KAAK,CAACE,GAAI,KAAIF,KAAK,CAACG,GAAI,GAAE,CAAC;IACtGN,KAAK,CAAE,mBAAkBC,KAAK,CAACM,IAAI,CAAC,MAAM,CAAE,EAAC,CAAC;EAChD,CAAC;EAED,oBACEb,OAAA;IACEc,OAAO,EAAEV,qBAAsB;IAC/BW,SAAS,EAAC,kFAAkF;IAAAC,QAAA,EAC7F;EAED;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS;AAEb,CAAC;AAACC,EAAA,GArBIpB,oBAAoB;AAuB1B,eAAeA,oBAAoB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}